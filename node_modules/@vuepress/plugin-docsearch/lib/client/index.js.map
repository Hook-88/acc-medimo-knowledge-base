{"version":3,"file":"index.js","sources":["../../src/client/composables/useDocSearchHotkeyListener.ts","../../src/client/composables/useDocSearchSlim.ts","../../src/client/helpers/docsearch.ts","../../src/client/utils/getFacetFilters.ts","../../src/client/utils/getIndices.ts","../../src/client/utils/getSearchButtonTemplate.ts","../../src/client/utils/pollToOpenDocSearch.ts","../../src/client/utils/preconnectToAlgolia.ts","../../src/client/components/DocSearch.ts"],"sourcesContent":["import type { DocSearchProps } from '@docsearch/react'\nimport { isMacOS, isiPad } from '@vuepress/helper/client'\nimport { useEventListener } from '@vueuse/core'\nimport type { ComputedRef } from 'vue'\n\n/**\n * Add hotkey listener, remove it after triggered\n */\nexport const useDocSearchHotkeyListener = (\n  options: ComputedRef<DocSearchProps>,\n  callback: () => void,\n): void => {\n  const cleanup = useEventListener('keydown', (event) => {\n    const { keyboardShortcuts = {} } = options.value\n    const triggerByHotKey =\n      keyboardShortcuts['Ctrl/Cmd+K'] !== false &&\n      event.key === 'k' &&\n      (isMacOS() || isiPad() ? event.metaKey : event.ctrlKey)\n    const triggeredBySlashKey =\n      keyboardShortcuts['/'] !== false && event.key === '/'\n\n    if (triggerByHotKey || triggeredBySlashKey) {\n      event.preventDefault()\n      callback()\n      cleanup()\n    }\n  })\n}\n","import type { DocSearchProps } from '@docsearch/react'\nimport { debounce } from 'ts-debounce'\nimport { useRouter } from 'vuepress/client'\nimport { removeLeadingSlash, resolveRoutePathFromUrl } from 'vuepress/shared'\n\ndeclare const __DOCSEARCH_INDEX_BASE__: string\n\n/**\n * Get docsearch options to be compatible with VuePress\n */\nexport const useDocSearchShim = (): Partial<DocSearchProps> => {\n  const router = useRouter()\n\n  return {\n    // convert item url to pathname of current site\n    transformItems: (items) =>\n      items.map((item) => ({\n        ...item,\n        url: `${\n          // append current base\n          __VUEPRESS_BASE__\n        }${removeLeadingSlash(\n          // get route path\n          resolveRoutePathFromUrl(item.url, __DOCSEARCH_INDEX_BASE__),\n        )}`,\n      })),\n\n    // navigation behavior triggered by `onKeyDown` internally\n    navigator: {\n      // when pressing Enter without metaKey\n      navigate: ({ itemUrl }) => {\n        router.push(itemUrl.replace(__VUEPRESS_BASE__, '/'))\n      },\n    },\n\n    // add search debounce\n    // @ts-expect-error: Return type of search is a type parameter\n    transformSearchClient: (searchClient) => ({\n      ...searchClient,\n      search: debounce(searchClient.search, 500),\n    }),\n  }\n}\n","import type { DocSearchProps } from '@docsearch/react'\nimport { deepAssign, isFunction } from '@vuepress/helper/client'\nimport { watchImmediate } from '@vueuse/core'\nimport type { App, ComputedRef, InjectionKey, MaybeRefOrGetter, Ref } from 'vue'\nimport { computed, inject, isRef, readonly, ref } from 'vue'\nimport { useRouteLocale } from 'vuepress/client'\nimport type { DocSearchOptions } from '../../shared/index.js'\n\ndeclare const __VUEPRESS_DEV__: boolean\ndeclare const __DOCSEARCH_OPTIONS__: DocSearchOptions\n\nconst docSearchDefineOptions: Partial<DocSearchProps> = __DOCSEARCH_OPTIONS__\n\ntype DocSearchRef = Ref<\n  DocSearchProps & {\n    locales?: Record<string, DocSearchProps>\n  }\n>\n\n// @ts-expect-error: Types loop back\nconst docsearchOptions: DocSearchRef = ref(\n  docSearchDefineOptions as DocSearchProps,\n)\n\nconst docsearchSymbol: InjectionKey<Readonly<DocSearchRef>> = Symbol(\n  __VUEPRESS_DEV__ ? 'docsearch' : '',\n)\n\n/**\n * DocSearch client locale options\n *\n * DocSearch 客户端多语言选项\n */\nexport type DocSearchClientLocaleOptions = Partial<DocSearchProps>\n\n/**\n * DocSearch client options\n *\n * DocSearch 客户端选项\n */\nexport interface DocSearchClientOptions extends DocSearchClientLocaleOptions {\n  /**\n   * Locale options\n   *\n   * 多语言选项\n   */\n  locales?: Record<string, DocSearchClientLocaleOptions>\n}\n\n/**\n * Customize DocSearch options\n *\n * 自定义 DocSearch 选项\n *\n * @param options - DocSearch options, support plain object, ref or getter / DocSearch 选项，支持普通对象，Ref 或 Getter\n *\n * @example\n * ```ts\n * import { defineDocSearchConfig } from '@vuepress/plugin-docsearch/client'\n *\n * // Use plain object\n * defineDocSearchConfig({\n *   translations: {\n *     button: {\n *       buttonText: 'Search',\n *     },\n *   },\n * })\n *\n * // Use ref\n * const options = ref({\n *   translations: {\n *     button: {\n *       buttonText: 'Search',\n *     },\n *   },\n * })\n * defineDocSearchConfig(options)\n *\n * // Use getter\n * defineDocSearchConfig(() => ({\n *   translations: {\n *     button: {\n *       buttonText: isDarkMode.value ? 'Search in dark' : 'Search in light',\n *     },\n *   },\n * }))\n * ```\n */\nexport const defineDocSearchConfig = (\n  options: MaybeRefOrGetter<DocSearchClientOptions>,\n): void => {\n  if (isRef(options)) {\n    watchImmediate(\n      () => options.value,\n      (value) => {\n        docsearchOptions.value = deepAssign({}, docSearchDefineOptions, value)\n      },\n    )\n  } else if (isFunction(options)) {\n    watchImmediate(computed(options), (value) => {\n      docsearchOptions.value = deepAssign({}, docSearchDefineOptions, value)\n    })\n  } else {\n    docsearchOptions.value = deepAssign({}, docSearchDefineOptions, options)\n  }\n}\n\n/**\n * @internal\n */\nexport const useDocSearchOptions = (): ComputedRef<DocSearchProps> => {\n  const options = inject(docsearchSymbol)!\n  const routeLocale = useRouteLocale()\n\n  return computed(() => ({\n    ...options.value,\n    ...options.value.locales?.[routeLocale.value],\n  }))\n}\n\n/**\n * @internal\n */\nexport const injectDocSearchConfig = (app: App): void => {\n  // @ts-expect-error: Types loop back\n  app.provide(docsearchSymbol, readonly(docsearchOptions))\n}\n","import type { FacetFilters } from 'algoliasearch'\n\n/**\n * Get facet filters for current lang\n */\nexport const getFacetFilters = (\n  lang: string,\n  rawFacetFilters: FacetFilters = [],\n): FacetFilters => [\n  `lang:${lang}`,\n  ...((Array.isArray(rawFacetFilters)\n    ? rawFacetFilters\n    : [rawFacetFilters]) as string[]),\n]\n","import type { DocSearchIndex } from '@docsearch/react'\nimport { isString } from 'vuepress/shared'\nimport type { DocSearchOptions } from '../../shared/index.js'\nimport { getFacetFilters } from './getFacetFilters.js'\n\nexport const getIndices = (\n  options: DocSearchOptions,\n  lang: string,\n): DocSearchIndex[] => {\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  const { indices, indexName, searchParameters } = options\n\n  return (\n    indices ?? [\n      {\n        name: indexName ?? '',\n        searchParameters,\n      },\n    ]\n  ).map((item) => {\n    if (isString(item)) return { name: item, searchParameters }\n\n    const { searchParameters: indexSearchParameters, ...rest } = item\n\n    return {\n      ...rest,\n      searchParameters: {\n        ...indexSearchParameters,\n        facetFilters: getFacetFilters(\n          lang,\n          indexSearchParameters?.facetFilters,\n        ),\n      },\n    }\n  })\n}\n","import type { DocSearchProps } from '@docsearch/react'\nimport { isMacOS, isiPad } from '@vuepress/helper/client'\n\ntype DocSearchTranslation = Exclude<DocSearchProps['translations'], undefined>\n\n/**\n * Get the search button template\n *\n * Similar to content as in @docsearch/j, the key are rendered by text instead of svg\n */\nexport const getSearchButtonTemplate = ({\n  buttonText = 'Search',\n  buttonAriaLabel = buttonText,\n}: DocSearchTranslation['button'] = {}): string => {\n  const isApple = isMacOS() || isiPad()\n\n  return `<button type=\"button\" aria-label=\"${buttonAriaLabel}\" aria-keyshortcuts=\"${isApple ? 'Command' : 'Control'}+k\" class=\"DocSearch DocSearch-Button\"><span class=\"DocSearch-Button-Container\"><svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" aria-hidden=\"true\" class=\"DocSearch-Search-Icon\"><circle cx=\"11\" cy=\"11\" r=\"8\" stroke=\"currentColor\" fill=\"none\" stroke-width=\"1.4\"></circle><path d=\"m21 21-4.3-4.3\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg><span class=\"DocSearch-Button-Placeholder\">Search</span></span><span class=\"DocSearch-Button-Keys\"><kbd class=\"DocSearch-Button-Key DocSearch-Button-Key--${isApple ? 'command' : 'ctrl'}\">${isApple ? '⌘' : 'Ctrl'}</kbd><kbd class=\"DocSearch-Button-Key DocSearch-Button-Key--pressed\">K</kbd></span></button>`\n}\n","const POLL_INTERVAL = 16\n\n/**\n * Programmatically open the docsearch modal\n */\nexport const pollToOpenDocSearch = (): void => {\n  if (document.querySelector('.DocSearch-Modal')) return\n  const e = new Event('keydown') as {\n    -readonly [P in keyof KeyboardEvent]: KeyboardEvent[P]\n  }\n  e.key = 'k'\n  e.metaKey = true\n  window.dispatchEvent(e)\n  setTimeout(pollToOpenDocSearch, POLL_INTERVAL)\n}\n","/**\n * Preconnect to Algolia's API\n */\nexport const preconnectToAlgolia = (appId: string): void => {\n  const id = 'algolia-preconnect'\n  const rIC =\n    'requestIdleCallback' in window ? window.requestIdleCallback : setTimeout\n\n  rIC(() => {\n    if (document.head.querySelector(`#${id}`)) return\n    const preconnect = document.createElement('link')\n    preconnect.id = id\n    preconnect.rel = 'preconnect'\n    preconnect.href = `https://${appId}-dsn.algolia.net`\n    preconnect.crossOrigin = ''\n    document.head.appendChild(preconnect)\n  })\n}\n","import type { DocSearchProps } from '@docsearch/react'\nimport type { PropType } from 'vue'\nimport { computed, defineComponent, h, onMounted, ref, watch } from 'vue'\nimport { useLang, useRouteLocale } from 'vuepress/client'\nimport type { DocSearchOptions } from '../../shared/index.js'\nimport {\n  useDocSearchHotkeyListener,\n  useDocSearchShim,\n} from '../composables/index.js'\nimport { useDocSearchOptions } from '../helpers/index.js'\nimport {\n  getIndices,\n  getSearchButtonTemplate,\n  pollToOpenDocSearch,\n  preconnectToAlgolia,\n} from '../utils/index.js'\n\nexport const DocSearch = defineComponent({\n  name: 'DocSearch',\n\n  props: {\n    containerId: {\n      type: String,\n      default: 'docsearch-container',\n    },\n    options: {\n      type: Object as PropType<DocSearchOptions>,\n      default: () => ({}),\n    },\n  },\n\n  setup(props) {\n    const docSearchOptions = useDocSearchOptions()\n    const docsearchShim = useDocSearchShim()\n    const lang = useLang()\n    const routeLocale = useRouteLocale()\n\n    const hasInitialized = ref(false)\n    const hasTriggered = ref(false)\n\n    // resolve docsearch options for current locale\n    const options = computed<DocSearchProps>(() => {\n      const { locales = {}, ...rest } = props.options\n\n      return {\n        ...docSearchOptions.value,\n        ...rest,\n        ...locales[routeLocale.value],\n      }\n    })\n\n    /**\n     * Import docsearch js and initialize\n     */\n    const initialize = async (): Promise<void> => {\n      if (__VUEPRESS_SSR__) return\n\n      const { default: docsearch } = await import('@docsearch/js')\n\n      docsearch({\n        ...docsearchShim,\n        ...options.value,\n        container: `#${props.containerId}`,\n        indices: getIndices(options.value, lang.value),\n      })\n      // mark as initialized\n      hasInitialized.value = true\n    }\n\n    /**\n     * Trigger docsearch initialization and open it\n     */\n    const startDocsearch = (): void => {\n      if (hasTriggered.value || hasInitialized.value) return\n      // mark as triggered\n      hasTriggered.value = true\n      // initialize and open\n      void initialize()\n      pollToOpenDocSearch()\n      // re-initialize when route locale changes\n      watch(routeLocale, initialize)\n    }\n\n    // trigger when hotkey is pressed\n    useDocSearchHotkeyListener(options, startDocsearch)\n\n    // preconnect to algolia\n    onMounted(() => {\n      preconnectToAlgolia(options.value.appId)\n    })\n\n    return () => [\n      h('div', {\n        id: props.containerId,\n        style: { display: hasInitialized.value ? 'block' : 'none' },\n      }),\n      hasInitialized.value\n        ? null\n        : h('div', {\n            onClick: startDocsearch,\n            innerHTML: getSearchButtonTemplate(\n              options.value.translations?.button,\n            ),\n          }),\n    ]\n  },\n})\n"],"names":["useDocSearchHotkeyListener","options","callback","cleanup","useEventListener","event","keyboardShortcuts","triggerByHotKey","isMacOS","isiPad","triggeredBySlashKey","useDocSearchShim","router","useRouter","items","item","removeLeadingSlash","resolveRoutePathFromUrl","itemUrl","searchClient","debounce","docSearchDefineOptions","docsearchOptions","ref","docsearchSymbol","defineDocSearchConfig","isRef","watchImmediate","value","deepAssign","isFunction","computed","useDocSearchOptions","inject","routeLocale","useRouteLocale","injectDocSearchConfig","app","readonly","getFacetFilters","lang","rawFacetFilters","getIndices","indices","indexName","searchParameters","isString","indexSearchParameters","rest","getSearchButtonTemplate","buttonText","buttonAriaLabel","isApple","pollToOpenDocSearch","preconnectToAlgolia","appId","id","preconnect","DocSearch","defineComponent","props","docSearchOptions","docsearchShim","useLang","hasInitialized","hasTriggered","locales","initialize","docsearch","startDocsearch","watch","onMounted","h"],"mappings":"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"}